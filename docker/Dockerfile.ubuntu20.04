FROM ubuntu:20.04

WORKDIR /

RUN apt-get update -y

RUN DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    apt-utils \
    build-essential \
    curl \
    git \
    libcurl3-dev \
    pkg-config \
    rsync \
    software-properties-common \
    unzip \
    zip \
    openssh-server \
    openssh-client \
    wget \
    bsdmainutils \
    ccache \
    libssl-dev \
    less \
    sudo \
    gpg-agent \
    python3-dev \
    python3-pip

# Install cmake
ENV CMAKE_VERSION 3.22.1
RUN cd /tmp/ && \
    curl -OL https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz && \
    tar xf cmake-${CMAKE_VERSION}.tar.gz && cd cmake-${CMAKE_VERSION} && \
    ./bootstrap && make -j 16 && make install && \
    cd - && rm -rf /tmp/cmake-${CMAKE_VERSION}.tar.gz /tmp/cmake-${CMAKE_VERSION}

# Setup Python
RUN pip3 config --user set global.index http://mirrors.aliyun.com/pypi/simple
RUN pip3 config --user set global.index-url http://mirrors.aliyun.com/pypi/simple
RUN pip3 config --user set global.trusted-host mirrors.aliyun.com

RUN pip3 install clang-format==9.0.0

#######################
# Install zsh
#######################
RUN apt-get install -y zsh

## Install oh-my-zsh
RUN sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"

## Install zsh-autosuggestions
RUN git clone https://github.com/zsh-users/zsh-autosuggestions.git \
    /root/.zsh/zsh-autosuggestions
RUN echo "source /root/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh" >> /root/.zshrc

#######################
# Install nvim
#######################
RUN apt-get install -y \
    libtool \
    libtool-bin \
    autoconf \
    automake \
    cmake \
    libncurses5-dev \
    pkg-config \
    unzip \
    gettext

ENV NVIM_VERSION 0.6.1
RUN wget https://github.com/neovim/neovim/archive/refs/tags/v${NVIM_VERSION}.tar.gz && \
    tar xf v${NVIM_VERSION}.tar.gz && cd neovim-${NVIM_VERSION} && \
    make -j 10 && make install && cd .. && \
    rm -rf v${NVIM_VERSION}.tar.gz neovim-${NVIM_VERSION}
RUN ln -s $(which nvim) /usr/bin/vim
RUN ln -s $(which nvim) /usr/bin/vi

## Install Plug
RUN curl -fLo /root/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

## Add vim config
RUN mkdir -p /root/.config/nvim/
COPY config/init.vim /root/.config/nvim/init.vim

## Install coc.nvim
ENV NODEJS_VERSION v16.17.0
RUN wget https://nodejs.org/dist/$NODEJS_VERSION/node-$NODEJS_VERSION-linux-x64.tar.xz && \
    mkdir -p /usr/local/lib/nodejs && \
    tar -xJvf node-$NODEJS_VERSION-linux-x64.tar.xz -C /usr/local/lib/nodejs && \
    rm -rf node-$NODEJS_VERSION-linux-x64.tar.xz
ENV PATH "/usr/local/lib/nodejs/node-$NODEJS_VERSION-linux-x64/bin:$PATH"

RUN curl --compressed -o- -L https://yarnpkg.com/install.sh | bash
ENV PATH "/root/.yarn/bin:/root/.config/yarn/global/node_modules/.bin:$PATH"

RUN git clone https://github.com/neoclide/coc.nvim.git /root/.vim/plugged/coc.nvim -b master --depth 1 && \
    cd /root/.vim/plugged/coc.nvim
RUN cd /root/.vim/plugged/coc.nvim/ && yarn install && yarn build && cd -

#######################
# Install from tmux
#######################
RUN apt-get install -y tmux
COPY config/.tmux.conf /root/.tmux.conf

#######################
# Install from bazelisk
#######################
## Install packages
RUN apt-get install --no-install-recommends -y \
  openjdk-8-jdk \
  openjdk-8-jre-headless

ENV BAZELISK_VERSION v1.12.0
ENV BAZELISK_INSTALL_DIR /opt/bazelisk
RUN wget -c https://github.com/bazelbuild/bazelisk/releases/download/$BAZELISK_VERSION/bazelisk-linux-amd64 && \
    chmod +x bazelisk-linux-amd64 && \
    mkdir -p $BAZELISK_INSTALL_DIR && \
    mv bazelisk-linux-amd64 $BAZELISK_INSTALL_DIR && \
    ln -s $BAZELISK_INSTALL_DIR/bazelisk-linux-amd64 $BAZELISK_INSTALL_DIR/bazelisk

## Running bazel inside a `docker build` command causes trouble, cf:
##   https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
RUN echo "startup --batch" >> /etc/bazel.bazelrc
## Similarly, we need to workaround sandboxing issues:
##   https://github.com/bazelbuild/bazel/issues/418
RUN echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
      >> /etc/bazel.bazelrc
ENV PATH "/opt/bazelisk:${PATH}"
