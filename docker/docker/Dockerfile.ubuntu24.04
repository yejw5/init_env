FROM ubuntu:24.04

WORKDIR /

RUN apt-get update -y

RUN DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    apt-utils \
    build-essential \
    curl \
    git \
    libcurl3-dev \
    pkg-config \
    rsync \
    software-properties-common \
    unzip \
    zip \
    openssh-server \
    openssh-client \
    wget \
    bsdmainutils \
    ccache \
    libssl-dev \
    less \
    sudo \
    gpg-agent \
    python3-dev \
    python3-pip \
    cmake \
    clang-format \
    universal-ctags

# Setup Python
RUN pip3 config --user set global.index http://mirrors.aliyun.com/pypi/simple
RUN pip3 config --user set global.index-url http://mirrors.aliyun.com/pypi/simple
RUN pip3 config --user set global.trusted-host mirrors.aliyun.com

#######################
# Install zsh
#######################
RUN apt-get install -y zsh

## Install oh-my-zsh
RUN sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"

## Install zsh-autosuggestions
RUN git clone https://github.com/zsh-users/zsh-autosuggestions.git \
    /root/.zsh/zsh-autosuggestions
RUN echo "source /root/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh" >> /root/.zshrc
RUN echo "export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=cyan'" >> /root/.zshrc

#######################
# Install nvim
#######################
RUN apt-get install -y neovim python3-neovim
RUN apt-get install -y nodejs npm
RUN npm install -g n
RUN n stable

## Add vim config
COPY config/init.vim /root/.config/nvim/init.vim

## Install nvim Plug
RUN curl -fLo /root/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

RUN nvim --headless +PlugInstall +qall

RUN mv /usr/bin/vi /usr/bin/vi.bak && ln -s /usr/bin/nvim /usr/bin/vi

#######################
# Install from tmux
#######################
RUN apt-get install -y tmux
COPY config/.tmux.conf /root/.tmux.conf

#######################
# Install from bazelisk
#######################
## Install packages
RUN apt-get install --no-install-recommends -y \
  openjdk-8-jdk \
  openjdk-8-jre-headless

ENV BAZELISK_VERSION v1.12.0
ENV BAZELISK_INSTALL_DIR /opt/bazelisk
RUN wget -c https://github.com/bazelbuild/bazelisk/releases/download/$BAZELISK_VERSION/bazelisk-linux-amd64 && \
    chmod +x bazelisk-linux-amd64 && \
    mkdir -p $BAZELISK_INSTALL_DIR && \
    mv bazelisk-linux-amd64 $BAZELISK_INSTALL_DIR && \
    ln -s $BAZELISK_INSTALL_DIR/bazelisk-linux-amd64 $BAZELISK_INSTALL_DIR/bazelisk

## Running bazel inside a `docker build` command causes trouble, cf:
##   https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
RUN echo "startup --batch" >> /etc/bazel.bazelrc
## Similarly, we need to workaround sandboxing issues:
##   https://github.com/bazelbuild/bazel/issues/418
RUN echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
      >> /etc/bazel.bazelrc
ENV PATH "/opt/bazelisk:${PATH}"
